name: Build & Publish Packages

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      packages:
        description: 'Comma-separated list of packages to publish (without `packages/` prefix). If left empty ‚Äî all changed packages will be found.'
        required: false
        type: string

env:
  REGISTRY_URL: 'https://registry.npmjs.org'
  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GitHub Packages –≤–º–µ—Å—Ç–æ npmjs.org, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ
  # REGISTRY_URL: 'https://npm.pkg.github.com'

jobs:
  prepare:
    name: ‚è≥ Prepare list of packages
    runs-on: ubuntu-latest
    outputs:
      matrix-packages: ${{ steps.set-matrix.outputs.matrix-packages }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Define packages to publish
        id: set-matrix
        run: |
          # If passed via workflow_dispatch, specific packages (comma-separated, without `packages/` prefix)
          if [ -n "${{ github.event.inputs.packages }}" ]; then
            IFS=',' read -ra ARR <<< "${{ github.event.inputs.packages }}"
            # Substitute "packages/<name>"
            MATRIX_JSON="["

            for pkg in "${ARR[@]}"; do
              pkg_trimmed="$(echo "$pkg" | xargs)"  # remove extra spaces
              MATRIX_JSON+="\"packages/${pkg_trimmed}\","
            done

            # remove comma at the end and close JSON array
            MATRIX_JSON="${MATRIX_JSON%,}]"
          else
            # Auto-detect all changed packages in packages/*
            # Find only changed files since the previous commit
            CHANGED_PKGS=$(git diff --name-only HEAD~1 HEAD | grep '^packages/' | cut -d'/' -f2 | sort -u)
            if [ -z "$CHANGED_PKGS" ]; then
              echo "No changes in packages/, nothing to publish."
              MATRIX_JSON="[]"
            else
              MATRIX_JSON="["

              for pkg in $CHANGED_PKGS; do
                MATRIX_JSON+="\"packages/${pkg}\","
              done

              MATRIX_JSON="${MATRIX_JSON%,}]"
            fi
          fi

          echo "matrix-packages=$MATRIX_JSON" >> $GITHUB_OUTPUT

  build:
    name: üî® Build all packages
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ fromJson(needs.prepare.outputs.matrix-packages) && fromJson(needs.prepare.outputs.matrix-packages).length > 0 }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup Node.js & PNPM
        uses: pnpm/action-setup@v4
        with:
          version: '10.3.0'
      - name: üîß Setup Node.js (for npmrc)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üèó Build all packages
        run: pnpm build

      - name: üìù Lint packages
        run: pnpm lint:react

  publish:
    name: üöÄ Publish packages
    needs: build
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.prepare.outputs.matrix-packages) && fromJson(needs.prepare.outputs.matrix-packages).length > 0 }}
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        package-folder: ${{ fromJson(needs.prepare.outputs.matrix-packages) }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Setup Node.js & PNPM
        uses: pnpm/action-setup@v4
        with:
          version: '10.3.0'
      - name: üîß Setup Node.js (for npmrc)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: ${{ env.REGISTRY_URL }}
          always-auth: true

      - name: üõ°Ô∏è Setup npm Auth
        run: |
          echo "//$(echo ${{ env.REGISTRY_URL }} | sed 's#https://##')/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=${{ env.REGISTRY_URL }}" >> ~/.npmrc

      - name: üì¶ Install dependencies (only root)
        run: pnpm install --frozen-lockfile

      - name: üßê Check changes in package
        id: check-changes
        working-directory: ${{ matrix.package-folder }}
        run: |
          # Take name and version from the specified package
          PACKAGE_NAME=$(node -p "require('${PWD}/package.json').name")
          CURRENT_VERSION=$(node -p "require('${PWD}/package.json').version")

          # Check if there are changes in this folder since the previous commit
          if git diff --quiet HEAD~1 HEAD -- ${PWD##*/}; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
            echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
            echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: üî¢ Bump version
        if: steps.check-changes.outputs.skip == 'false'
        id: bump-version
        working-directory: ${{ matrix.package-folder }}
        run: |
          VERSION_TYPE="${{ github.event.inputs.version }}"
          # Update version in package.json without creating git tag
          NEW_VERSION=$(pnpm version "$VERSION_TYPE" --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: üìù Generate CHANGELOG
        if: steps.check-changes.outputs.skip == 'false'
        working-directory: ${{ matrix.package-folder }}
        run: |
          if ! command -v conventional-changelog &> /dev/null; then
            npm install -g conventional-changelog-cli
          fi
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0 || echo "Changelog generation skipped"

      - name: üéØ Commit version & tag
        if: steps.check-changes.outputs.skip == 'false'
        run: |
          PKG_FOLDER="${{ matrix.package-folder }}"
          PKG_SHORT="${PKG_FOLDER##*/}"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add "${PKG_FOLDER}/package.json"
          git add "${PKG_FOLDER}/CHANGELOG.md" || true

          git commit -m "chore(${PKG_SHORT}): bump version to ${{ steps.bump-version.outputs.new_version }}" || true
          # Create tag in the format <package-name>@<new_version>
          TAG_NAME="${{ steps.check-changes.outputs.package_name }}@${{ steps.bump-version.outputs.new_version }}"
          git tag "$TAG_NAME" -m "Release $TAG_NAME"
          # Push commit and tag
          git push origin HEAD --follow-tags

      - name: üì§ Publish to NPM
        if: steps.check-changes.outputs.skip == 'false'
        working-directory: ${{ matrix.package-folder }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing package ${{ steps.check-changes.outputs.package_name }}..."
          pnpm publish --access public --no-git-checks

  create-release:
    name: üè∑ Create GitHub Release
    needs: publish
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìë Collect list of latest tags
        id: get-tags
        run: |
          LATEST_TAGS=$(git tag --sort=-creatordate | head -5 | tr '\n' ' ')
          echo "latest_tags=$LATEST_TAGS" >> $GITHUB_OUTPUT

      - name: üîñ Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: "release-$(date +'%Y%m%d-%H%M%S')"
          name: "Release of packages $(date +'%Y-%m-%d %H:%M:%S')"
          body: |
            ## üöÄ New release of packages

            **Published packages:**
            ${{ steps.get-tags.outputs.latest_tags }}

            ### Changes
            - Automatic version bump: ${{ github.event.inputs.version }}
            - Updated dependencies
            - Fixed linter warnings

            ### Installation
            ```bash
            pnpm add @xsolla-zk/react @xsolla-zk/config @xsolla-zk/tokens
            ```
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
