name: Build & Publish Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      packages:
        description: 'Comma-separated list of packages to publish (without `packages/` prefix). If left empty ‚Äî will publish all packages.'
        required: false
        type: string
      sync_versions:
        description: 'Synchronize all packages to the same version'
        required: false
        default: false
        type: boolean

env:
  REGISTRY_URL: 'https://registry.npmjs.org'
  # If need to use GitHub Packages instead of npmjs.org, uncomment the line below
  # REGISTRY_URL: 'https://npm.pkg.github.com'

jobs:
  prepare:
    name: ‚è≥ Prepare list of packages
    runs-on: ubuntu-latest
    outputs:
      matrix-packages: ${{ steps.set-matrix.outputs['matrix-packages'] }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Define packages to publish
        id: set-matrix
        run: |
          # Packages to exclude from publishing
          EXCLUDED_PACKAGES=("docs" "vue" "app")

          is_excluded() {
            local pkg_name="$1"
            for excluded_pkg in "${EXCLUDED_PACKAGES[@]}"; do
              if [ "$pkg_name" == "$excluded_pkg" ]; then
                return 0
              fi
            done
            return 1
          }

          if [ -n "${{ github.event.inputs.packages }}" ]; then
            echo "üì¶ Manual packages specified: ${{ github.event.inputs.packages }}"
            IFS=',' read -ra ARR <<< "${{ github.event.inputs.packages }}"
            MATRIX_JSON="["
            for pkg in "${ARR[@]}"; do
              trim="$(echo "$pkg" | xargs)"
              pkg_path="packages/${trim}"

              if is_excluded "$trim"; then
                echo "üö´ Excluding package: $pkg_path (not for publishing)"
              else
                echo "‚úÖ Including package: $pkg_path"
                MATRIX_JSON+="\"${pkg_path}\","
              fi
            done
            MATRIX_JSON="${MATRIX_JSON%,}]"

          else
            echo "üîÑ Including all publishable packages"
            MATRIX_JSON="["
            for pkg_dir in packages/*/; do
              if [ -d "$pkg_dir" ]; then
                pkg_name=$(basename "$pkg_dir")

                if is_excluded "$pkg_name"; then
                  echo "üö´ Excluding package: $pkg_dir (not for publishing)"
                else
                  echo "‚úÖ Including package: $pkg_dir"
                  # Remove trailing slash
                  pkg_clean="${pkg_dir%/}"
                  MATRIX_JSON+="\"${pkg_clean}\","
                fi
              fi
            done
            MATRIX_JSON="${MATRIX_JSON%,}]"
          fi

          echo ">>> Final matrix-packages: $MATRIX_JSON"
          echo "matrix-packages=$(jq -cr '@json' <<< "$MATRIX_JSON")" >> $GITHUB_OUTPUT

  build:
    name: üî® Build all packages
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ fromJson(needs.prepare.outputs['matrix-packages']) && fromJson(needs.prepare.outputs['matrix-packages'])[0] != null }}
    outputs:
      new-version: ${{ steps.calculate-version.outputs['new-version'] }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üî¢ Calculate version
        id: calculate-version
        run: |
          echo "üîÑ Calculating new version based on root package.json..."
          echo "üìù Note: packages docs, vue, app are excluded from publishing"

          # Get version from root package.json
          ROOT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          echo "Root package.json version: $ROOT_VERSION"

          # Calculate new version based on bump type
          VERSION_TYPE="${{ github.event.inputs.version || 'patch' }}"
          echo "Version bump type: $VERSION_TYPE"

          IFS='.' read -ra VERSION_PARTS <<< "$ROOT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case "$VERSION_TYPE" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"

          # Update root package.json version
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          echo "Updated root package.json to version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: ‚öôÔ∏è Setup Node.js & PNPM
        uses: pnpm/action-setup@v4
        with:
          version: '10.3.0'
      - name: üîß Setup Node.js (for npmrc)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üèó Build all packages
        run: pnpm build

      - name: üìù Lint packages
        run: pnpm lint:react

      - name: üîç Check build artifacts
        run: |
          echo "Checking which packages have dist and types folders:"
          for pkg_dir in packages/*/; do
            pkg_name=$(basename "$pkg_dir")
            echo "üì¶ Package: $pkg_name"

            if [ -d "${pkg_dir}dist" ]; then
              echo "  ‚úÖ dist/ folder found"
              ls -la "${pkg_dir}dist" | head -3
            else
              echo "  ‚ùå dist/ folder not found"
            fi

            if [ -d "${pkg_dir}types" ]; then
              echo "  ‚úÖ types/ folder found"
              ls -la "${pkg_dir}types" | head -3
            else
              echo "  ‚ùå types/ folder not found"
            fi
            echo ""
          done

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-packages
          path: |
            packages/*/dist/
            packages/*/types/
            package.json
          if-not-found: ignore

  publish:
    name: üöÄ Publish packages
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.prepare.outputs['matrix-packages']) && fromJson(needs.prepare.outputs['matrix-packages'])[0] != null }}
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        package-folder: ${{ fromJson(needs.prepare.outputs['matrix-packages']) }}
    outputs:
      published-packages: ${{ steps.published-info.outputs.packages }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì• Download updated package files
        uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: .

      - name: ‚öôÔ∏è Setup Node.js & PNPM
        uses: pnpm/action-setup@v4
        with:
          version: '10.3.0'
      - name: üîß Setup Node.js (for npmrc)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          always-auth: true

      - name: üõ°Ô∏è Setup npm Auth
        run: |
          echo "Setting up NPM authentication for ${{ env.REGISTRY_URL }}"

          # Setup .npmrc with registry and auth token
          echo "${{ env.REGISTRY_URL }}/:_authToken=${{ secrets.NPM_TOKEN }}" | sed 's|https://|//|' > ~/.npmrc
          echo "registry=${{ env.REGISTRY_URL }}/" >> ~/.npmrc

          # Verify configuration
          echo "NPM configuration:"
          cat ~/.npmrc | sed 's/_authToken=.*/_authToken=***HIDDEN***/'

          # Test authentication
          echo "Testing NPM authentication:"
          npm whoami || echo "Warning: npm whoami failed, but this might be normal for org tokens"

      - name: üì¶ Install dependencies (only root)
        run: pnpm install --frozen-lockfile

      - name: üßê Check package info
        id: check-changes
        working-directory: ${{ matrix['package-folder'] }}
        run: |
          # Get package info
          PACKAGE_NAME=$(node -p "require('${PWD}/package.json').name")
          CURRENT_VERSION=$(node -p "require('${PWD}/package.json').version")
          PACKAGE_SHORT_NAME=${PWD##*/}

          echo "üì¶ Processing package: $PACKAGE_NAME"
          echo "üìä Current version: $CURRENT_VERSION"

          echo "skip=false" >> $GITHUB_OUTPUT
          echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "package_short_name=${PACKAGE_SHORT_NAME}" >> $GITHUB_OUTPUT
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: üî¢ Bump version
        if: steps.check-changes.outputs.skip == 'false'
        id: bump-version
        working-directory: ${{ matrix['package-folder'] }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Always use calculated version from prepare job
          NEW_VERSION="${{ needs.build.outputs.new-version }}"
          echo "üîÑ Using version: $NEW_VERSION (was: $CURRENT_VERSION)"

          # Skip if version hasn't changed
          if [ "$NEW_VERSION" == "$CURRENT_VERSION" ]; then
            echo "‚è≠Ô∏è Version unchanged ($NEW_VERSION) - skipping package updates"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Updating version: $CURRENT_VERSION ‚Üí $NEW_VERSION"

            # Update package.json with new version
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
              pkg.version = '$NEW_VERSION';
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
            "

            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi

          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: üì§ Publish to NPM
        if: steps.check-changes.outputs.skip == 'false' && steps.bump-version.outputs.version_changed == 'true'
        working-directory: ${{ matrix['package-folder'] }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing package ${{ steps.check-changes.outputs.package_name }} v${{ steps.bump-version.outputs.new_version }}..."

          # Verify package can be built before publishing
          echo "Verifying package integrity..."
          npm pack --dry-run || {
            echo "‚ùå Package verification failed"
            exit 1
          }

          # Check if version already exists on NPM
          EXISTING_VERSION=$(npm view ${{ steps.check-changes.outputs.package_name }}@${{ steps.bump-version.outputs.new_version }} version 2>/dev/null || echo "")
          if [ -n "$EXISTING_VERSION" ]; then
            echo "‚ùå Version ${{ steps.bump-version.outputs.new_version }} already exists on NPM"
            exit 1
          fi

          # Publish package
          echo "üì¶ Publishing to NPM..."
          pnpm publish --access public --no-git-checks || {
            echo "‚ùå Failed to publish package"
            exit 1
          }

          echo "‚úÖ Successfully published ${{ steps.check-changes.outputs.package_name }}@${{ steps.bump-version.outputs.new_version }}"

      - name: üìã Collect published packages info
        if: steps.check-changes.outputs.skip == 'false' && steps.bump-version.outputs.version_changed == 'true'
        id: published-info
        run: |
          PKG_INFO="${{ steps.check-changes.outputs.package_name }}@${{ steps.bump-version.outputs.new_version }}"
          echo "packages=${PKG_INFO}" >> $GITHUB_OUTPUT

  commit-and-release:
    name: üéØ Commit & Create Tag
    needs: [prepare, build, publish]
    runs-on: ubuntu-latest
    if: ${{ needs.publish.result == 'success' }}
    permissions:
      contents: write
      actions: write
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì• Download updated package files
        uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: .

      - name: üéØ Commit all changes and create tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Add root package.json (always updated with new version)
          git add "package.json" || true
          echo "Added root package.json"

          # Add all package.json changes (no CHANGELOG.md)
          for pkg_folder in $(echo '${{ needs.prepare.outputs.matrix-packages }}' | jq -r '.[]'); do
            if [ -f "${pkg_folder}/package.json" ]; then
              git add "${pkg_folder}/package.json" || true
              echo "Added package.json for ${pkg_folder}"
            fi
          done

          # Use calculated version from prepare job
          NEW_VERSION="${{ needs.build.outputs.new-version }}"
          echo "Using version: $NEW_VERSION"

          # Debug: Check file status
          echo "üìã Checking file status before staging:"
          git status --porcelain || true

          echo "üìã Files that will be staged:"
          echo "Root package.json version: $(node -p "require('./package.json').version" 2>/dev/null || echo 'NOT_FOUND')"

          for pkg_folder in $(echo '${{ needs.prepare.outputs.matrix-packages }}' | jq -r '.[]'); do
            if [ -f "${pkg_folder}/package.json" ]; then
              pkg_version=$(node -p "require('./${pkg_folder}/package.json').version" 2>/dev/null || echo 'NOT_FOUND')
              echo "${pkg_folder}/package.json version: $pkg_version"
            fi
          done

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Create commit message
            if [ "${{ github.event.inputs.sync_versions }}" == "true" ]; then
              git commit -m "chore: bump all packages to synchronized version v${NEW_VERSION}

              Published packages:
              $(echo '${{ needs.prepare.outputs.matrix-packages }}' | jq -r '.[]' | sed 's/packages\//- @xsolla-zk\//')"
            else
              git commit -m "chore: publish packages

              Published packages:
              $(echo '${{ needs.prepare.outputs.matrix-packages }}' | jq -r '.[]' | sed 's/packages\//- @xsolla-zk\//')"
            fi

            # Create single tag with root version
            git tag "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
            echo "Created tag: v${NEW_VERSION}"
          fi

          # Pull latest changes and push
          git pull --rebase origin main || true
          git push origin HEAD --follow-tags

      - name: üîñ Trigger Changelog Workflow
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newVersion = '${{ needs.build.outputs.new-version }}';

            console.log(`üîñ Triggering changelog workflow for version: v${newVersion}`);

            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'changelog.yml',
                ref: 'main',
                inputs: {
                  tag: `v${newVersion}`,
                  version: newVersion
                }
              });

              console.log('‚úÖ Changelog workflow triggered');
            } catch (error) {
              console.error('‚ùå Error triggering changelog workflow:', error.message);
              // Don't break the workflow if changelog doesn't trigger
            }

  notify:
    name: üì¢ Notify Results
    needs: [prepare, build, publish, commit-and-release]
    runs-on: ubuntu-latest
    if: always() && fromJson(needs.prepare.outputs['matrix-packages']) && fromJson(needs.prepare.outputs['matrix-packages'])[0] != null
    steps:
      - name: üìä Check overall status
        run: |
          if [ "${{ needs.publish.result }}" == "success" ] && [ "${{ needs.commit-and-release.result }}" == "success" ]; then
            echo "‚úÖ All packages published and committed successfully!"
            echo "OVERALL_STATUS=success" >> $GITHUB_ENV
          elif [ "${{ needs.publish.result }}" == "failure" ]; then
            echo "‚ùå Packages failed to publish. No commits were made to main."
            echo "OVERALL_STATUS=failure" >> $GITHUB_ENV
            exit 1
          elif [ "${{ needs.commit-and-release.result }}" == "failure" ]; then
            echo "‚ö†Ô∏è Packages published but commit/tagging failed."
            echo "OVERALL_STATUS=partial" >> $GITHUB_ENV
          elif [ "${{ needs.publish.result }}" == "cancelled" ]; then
            echo "‚èπÔ∏è Publishing was cancelled."
            echo "OVERALL_STATUS=cancelled" >> $GITHUB_ENV
            exit 1
          else
            echo "‚ö†Ô∏è Publishing completed with unknown status"
            echo "OVERALL_STATUS=unknown" >> $GITHUB_ENV
          fi

      - name: üéâ Success notification
        if: env.OVERALL_STATUS == 'success'
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "All packages have been published to NPM and changes committed to main."

      - name: üí• Failure notification
        if: env.OVERALL_STATUS == 'failure'
        run: |
          echo "üí• Deployment failed!"
          echo "Packages failed to publish. No changes were made to the repository."
          echo "Please check the logs above for details."

      - name: ‚ö†Ô∏è Partial success notification
        if: env.OVERALL_STATUS == 'partial'
        run: |
          echo "‚ö†Ô∏è Partial success!"
          echo "Packages were published to NPM but commit/tagging failed."
          echo "Manual intervention may be required."
