name: Build & Publish Packages

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      packages:
        description: 'Comma-separated list of packages to publish (without `packages/` prefix). If left empty ‚Äî will be found all changed packages.'
        required: false
        type: string

env:
  REGISTRY_URL: 'https://registry.npmjs.org'
  # If need to use GitHub Packages instead of npmjs.org, uncomment the line below
  # REGISTRY_URL: 'https://npm.pkg.github.com'

jobs:
  prepare:
    name: ‚è≥ Prepare list of packages
    runs-on: ubuntu-latest
    outputs:
      matrix-packages: ${{ steps.set-matrix.outputs['matrix-packages'] }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Define packages to publish
        id: set-matrix
        run: |
          if [ -n "${{ github.event.inputs.packages }}" ]; then
            IFS=',' read -ra ARR <<< "${{ github.event.inputs.packages }}"
            MATRIX_JSON="["
            for pkg in "${ARR[@]}"; do
              trim="$(echo "$pkg" | xargs)"
              MATRIX_JSON+="\"packages/${trim}\","
            done
            MATRIX_JSON="${MATRIX_JSON%,}]"
          else
            CHANGED_PKGS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
                        | grep '^packages/' | cut -d'/' -f2 | sort -u)
            if [ -z "$CHANGED_PKGS" ]; then
              echo "No changes in packages/, nothing to publish."
              MATRIX_JSON="[]"
            else
              MATRIX_JSON="["
              for pkg in $CHANGED_PKGS; do
                MATRIX_JSON+="\"packages/${pkg}\","
              done
              MATRIX_JSON="${MATRIX_JSON%,}]"
            fi
          fi

          echo ">>> matrix-packages raw: $MATRIX_JSON"
          echo "matrix-packages=$(jq -cr '@json' <<< "$MATRIX_JSON")" >> $GITHUB_OUTPUT

  debug-matrix:
    name: üêõ Debug matrix-packages
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Show raw string and length
        run: |
          echo "RAW from prepare: ${{ needs.prepare.outputs['matrix-packages'] }}"
          echo "Not Empty: ${{ fromJson(needs.prepare.outputs['matrix-packages'])[0] != null }}"
          echo "First Element: ${{ fromJson(needs.prepare.outputs['matrix-packages'])[0] }}"

  build:
    name: üî® Build all packages
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ fromJson(needs.prepare.outputs['matrix-packages']) && fromJson(needs.prepare.outputs['matrix-packages'])[0] != null }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup Node.js & PNPM
        uses: pnpm/action-setup@v4
        with:
          version: '10.3.0'
      - name: üîß Setup Node.js (for npmrc)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üèó Build all packages
        run: pnpm build

      - name: üìù Lint packages
        run: pnpm lint:react

  publish:
    name: üöÄ Publish packages
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.prepare.outputs['matrix-packages']) && fromJson(needs.prepare.outputs['matrix-packages'])[0] != null }}
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        package-folder: ${{ fromJson(needs.prepare.outputs['matrix-packages']) }}
    outputs:
      published-packages: ${{ steps.published-info.outputs.packages }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Setup Node.js & PNPM
        uses: pnpm/action-setup@v4
        with:
          version: '10.3.0'
      - name: üîß Setup Node.js (for npmrc)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: ${{ env.REGISTRY_URL }}
          always-auth: true

      - name: üõ°Ô∏è Setup npm Auth
        run: |
          echo "//$(echo ${{ env.REGISTRY_URL }} | sed 's#https://##')/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=${{ env.REGISTRY_URL }}" >> ~/.npmrc

      - name: üì¶ Install dependencies (only root)
        run: pnpm install --frozen-lockfile

      - name: üßê Check changes in package
        id: check-changes
        working-directory: ${{ matrix['package-folder'] }}
        run: |
          # Take name and version from specified package
          PACKAGE_NAME=$(node -p "require('${PWD}/package.json').name")
          CURRENT_VERSION=$(node -p "require('${PWD}/package.json').version")
          PACKAGE_SHORT_NAME=${PWD##*/}

          # Check if there are changes in this folder relative to the previous commit
          if git diff --quiet HEAD~1 HEAD -- . 2>/dev/null || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
            echo "package_short_name=${PACKAGE_SHORT_NAME}" >> $GITHUB_OUTPUT
            echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
            echo "package_short_name=${PACKAGE_SHORT_NAME}" >> $GITHUB_OUTPUT
            echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: üî¢ Bump version
        if: steps.check-changes.outputs.skip == 'false'
        id: bump-version
        working-directory: ${{ matrix['package-folder'] }}
        run: |
          VERSION_TYPE="${{ github.event.inputs.version || 'patch' }}"
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          echo "Current version: $CURRENT_VERSION"
          echo "Version bump type: $VERSION_TYPE"

          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Calculate new version based on type
          case "$VERSION_TYPE" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "Unknown version type: $VERSION_TYPE"
              exit 1
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"

          # Update package.json with new version
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          echo "New version: $NEW_VERSION"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=v${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: üìù Generate CHANGELOG
        if: steps.check-changes.outputs.skip == 'false'
        working-directory: ${{ matrix['package-folder'] }}
        run: |
          PKG_NAME="${{ steps.check-changes.outputs.package_short_name }}"
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          OLD_VERSION="${{ steps.check-changes.outputs.current_version }}"

          # Get commits since last version tag
          LAST_TAG=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges ${LAST_TAG}..HEAD -- .)
          else
            COMMITS=$(git log --oneline --no-merges -- . | head -10)
          fi

          # Create or update CHANGELOG.md
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Prepare new changelog entry
          TEMP_CHANGELOG=$(mktemp)
          echo "# Changelog" > $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG

          # Add new version entry
          echo "## [${NEW_VERSION}] - $(date +%Y-%m-%d)" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG

          # Categorize commits
          FEATURES=""
          FIXES=""
          CHORES=""
          BREAKING=""

          while IFS= read -r commit; do
            if [ -n "$commit" ]; then
              if echo "$commit" | grep -q "^[a-f0-9]* feat[(!:]"; then
                FEATURES="${FEATURES}- ${commit#* }\n"
              elif echo "$commit" | grep -q "^[a-f0-9]* fix[(!:]"; then
                FIXES="${FIXES}- ${commit#* }\n"
              elif echo "$commit" | grep -q "^[a-f0-9]* BREAKING CHANGE"; then
                BREAKING="${BREAKING}- ${commit#* }\n"
              elif echo "$commit" | grep -qE "^[a-f0-9]* (chore|docs|style|refactor|test|build|ci)[(!:]"; then
                CHORES="${CHORES}- ${commit#* }\n"
              else
                CHORES="${CHORES}- ${commit#* }\n"
              fi
            fi
          done <<< "$COMMITS"

          # Add categorized changes
          if [ -n "$BREAKING" ]; then
            echo "### üí• Breaking Changes" >> $TEMP_CHANGELOG
            echo -e "$BREAKING" >> $TEMP_CHANGELOG
          fi

          if [ -n "$FEATURES" ]; then
            echo "### ‚ú® New Features" >> $TEMP_CHANGELOG
            echo -e "$FEATURES" >> $TEMP_CHANGELOG
          fi

          if [ -n "$FIXES" ]; then
            echo "### üêõ Bug Fixes" >> $TEMP_CHANGELOG
            echo -e "$FIXES" >> $TEMP_CHANGELOG
          fi

          if [ -n "$CHORES" ]; then
            echo "### üîß Other Changes" >> $TEMP_CHANGELOG
            echo -e "$CHORES" >> $TEMP_CHANGELOG
          fi

          echo "" >> $TEMP_CHANGELOG

          # Append existing changelog content (skip first few lines)
          if [ -f "CHANGELOG.md" ]; then
            tail -n +4 CHANGELOG.md >> $TEMP_CHANGELOG
          fi

          # Replace changelog
          mv $TEMP_CHANGELOG CHANGELOG.md

          echo "Generated changelog for version $NEW_VERSION"

      - name: üéØ Commit version & tag
        if: steps.check-changes.outputs.skip == 'false'
        run: |
          PKG_FOLDER="${{ matrix['package-folder'] }}"
          PKG_SHORT="${{ steps.check-changes.outputs.package_short_name }}"
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          TAG_NAME="${{ steps.bump-version.outputs.tag_name }}"

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add "${PKG_FOLDER}/package.json"
          git add "${PKG_FOLDER}/CHANGELOG.md" || true

          git commit -m "chore(${PKG_SHORT}): bump version to v${NEW_VERSION}" || true

          # Create tag in format vX.X.X
          git tag "$TAG_NAME" -m "Release ${PKG_SHORT} v${NEW_VERSION}"

          # Push commit and tag
          git push origin HEAD --follow-tags

      - name: üì§ Publish to NPM
        if: steps.check-changes.outputs.skip == 'false'
        working-directory: ${{ matrix['package-folder'] }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing package ${{ steps.check-changes.outputs.package_name }} v${{ steps.bump-version.outputs.new_version }}..."
          pnpm publish --access public --no-git-checks

      - name: üîñ Create GitHub Release
        if: steps.check-changes.outputs.skip == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.bump-version.outputs.tag_name }}
          name: "${{ steps.check-changes.outputs.package_short_name }} v${{ steps.bump-version.outputs.new_version }}"
          body: |
            ## üöÄ ${{ steps.check-changes.outputs.package_name }} v${{ steps.bump-version.outputs.new_version }}

            ### üì¶ Installation
            ```bash
            npm install ${{ steps.check-changes.outputs.package_name }}@${{ steps.bump-version.outputs.new_version }}
            # or
            pnpm add ${{ steps.check-changes.outputs.package_name }}@${{ steps.bump-version.outputs.new_version }}
            # or
            yarn add ${{ steps.check-changes.outputs.package_name }}@${{ steps.bump-version.outputs.new_version }}
            ```

            ### üìù Changes
            Updated version: **${{ github.event.inputs.version || 'patch' }}**

            See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/${{ matrix['package-folder'] }}/CHANGELOG.md) for details.

            ### üîó Links
            - [NPM Package](https://www.npmjs.com/package/${{ steps.check-changes.outputs.package_name }})
            - [Documentation](https://github.com/${{ github.repository }}/tree/main/${{ matrix['package-folder'] }})
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Collect published packages info
        if: steps.check-changes.outputs.skip == 'false'
        id: published-info
        run: |
          PKG_INFO="${{ steps.check-changes.outputs.package_name }}@${{ steps.bump-version.outputs.new_version }}"
          echo "packages=${PKG_INFO}" >> $GITHUB_OUTPUT
