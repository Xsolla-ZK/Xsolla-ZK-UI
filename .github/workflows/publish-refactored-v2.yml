name: Build & Publish Packages v2

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      packages:
        description: 'Comma-separated list of packages (without packages/ prefix). Leave empty for all.'
        required: false
        type: string
      sync_versions:
        description: 'Synchronize all packages to the same version'
        required: false
        default: true
        type: boolean

env:
  REGISTRY_URL: 'https://registry.npmjs.org'
  PNPM_VERSION: '10.3.0'
  NODE_VERSION: '20.x'

jobs:
  prepare:
    name: 🔧 Prepare
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.packages.outputs.result }}
      version: ${{ steps.version.outputs.result }}
      should-publish: ${{ steps.packages.outputs.should-publish }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔢 Calculate Version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TYPE="${{ github.event.inputs.version }}"

          IFS='.' read -ra V <<< "$VERSION"
          case "$TYPE" in
            major) NEW_VERSION="$((${V[0]}+1)).0.0" ;;
            minor) NEW_VERSION="${V[0]}.$((${V[1]}+1)).0" ;;
            *) NEW_VERSION="${V[0]}.${V[1]}.$((${V[2]}+1))" ;;
          esac

          echo "result=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📊 Version: $VERSION → $NEW_VERSION"

      - name: 📦 Determine Packages
        id: packages
        run: |
          EXCLUDED=("docs" "vue" "app")
          RESULT="[]"

          if [[ -n "${{ github.event.inputs.packages }}" ]]; then
            IFS=',' read -ra PKGS <<< "${{ github.event.inputs.packages }}"
            for pkg in "${PKGS[@]}"; do
              pkg=$(echo "$pkg" | xargs)
              if [[ ! " ${EXCLUDED[@]} " =~ " $pkg " ]]; then
                RESULT=$(echo "$RESULT" | jq ". + [\"packages/$pkg\"]")
              fi
            done
          else
            for dir in packages/*/; do
              name=$(basename "$dir")
              if [[ ! " ${EXCLUDED[@]} " =~ " $name " ]]; then
                RESULT=$(echo "$RESULT" | jq ". + [\"${dir%/}\"]")
              fi
            done
          fi

          SHOULD_PUBLISH=$(echo "$RESULT" | jq 'length > 0')
          echo "result=$RESULT" >> $GITHUB_OUTPUT
          echo "should-publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          echo "📦 Packages: $RESULT"

  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should-publish == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 🔄 Update Versions
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          PACKAGES='${{ needs.prepare.outputs.packages }}'

          # Update root
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          # Update packages
          echo "$PACKAGES" | jq -r '.[]' | while read pkg; do
            [[ -f "$pkg/package.json" ]] && node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('$pkg/package.json', 'utf8'));
              pkg.version = '$VERSION';
              fs.writeFileSync('$pkg/package.json', JSON.stringify(pkg, null, 2) + '\n');
            "
          done

      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build
        run: pnpm build

      - name: 📝 Lint
        run: pnpm lint:react

      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-packages
          path: |
            packages/*/dist/
            packages/*/types/
            packages/*/package.json
            package.json

  publish:
    name: 🚀 Publish
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.should-publish == 'true'
    strategy:
      matrix:
        package: ${{ fromJson(needs.prepare.outputs.packages) }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: .

      - name: ⚙️ Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Check Package
        id: check
        working-directory: ${{ matrix.package }}
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION="${{ needs.prepare.outputs.version }}"

          if npm view "$NAME@$VERSION" version &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⏭️ $NAME@$VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ $NAME@$VERSION is new"
          fi

      - name: 🚀 Publish
        if: steps.check.outputs.exists == 'false'
        working-directory: ${{ matrix.package }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🚀 Publishing $(node -p "require('./package.json').name")@${{ needs.prepare.outputs.version }}"
          pnpm publish --access public --no-git-checks

  finalize:
    name: 🎯 Finalize
    runs-on: ubuntu-latest
    needs: [prepare, build, publish]
    if: always() && needs.prepare.outputs.should-publish == 'true'
    permissions:
      contents: write
      actions: write
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Create Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          VERSION="${{ needs.prepare.outputs.version }}"
          TAG="v$VERSION"

          if git ls-remote --tags origin "$TAG" | grep -q "$TAG"; then
            echo "⏭️ Tag $TAG exists"
          else
            echo "✅ Creating tag $TAG"
            git tag "$TAG" -m "Release $TAG"
            git push origin "$TAG"

            # Trigger changelog
            gh workflow run changelog.yml -f tag="$TAG" -f version="$VERSION" || true
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [prepare, build, publish, finalize]
    if: always() && needs.prepare.outputs.should-publish == 'true'
    steps:
      - name: 📊 Show Status
        run: |
          if [[ "${{ needs.publish.result }}" == "success" ]]; then
            echo "🚀 Publishing completed successfully!"
          else
            echo "❌ Publishing failed"
            exit 1
          fi